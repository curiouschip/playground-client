#!/usr/bin/env ruby
require 'gli'
require 'highline/import'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'playground-client'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/playground` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/playground-client now"
  exit 64
end

include GLI::App

def stripped(value)
  value = (value || '').strip
  value.length > 0 ? value : nil
end

def maybe_prompt(input_value, prompt, &block)
  value = stripped(input_value)
  if value.nil?
    value = ask(prompt, &block)
  end
  value
end

program_desc 'command-line client for playground.io'

version PlaygroundClient::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

#
# Register User

desc 'Register a user account'
arg_name 'username'
command :register do |c|
  
  c.desc 'Email'
  c.flag :email

  c.desc 'Password'
  c.flag :password

  c.desc 'Name'
  c.flag :name

  c.desc 'Location'
  c.flag :location

  c.action do |global_options,options,args|

    raise "please enter a username" if args.empty?
    raise "too many arguments" if args.length > 1

    username = args.first
    raise "invalid username" unless username.match(/\A[a-z][a-z0-9_-]{2,}\Z/i)
    
    email = maybe_prompt(options[:email], "Email: ") { |q|
      q.validate = /\A[^@]+@([a-z][a-z0-9-]*)(\.([a-z][a-z0-9-]*))+\Z/i
      q.responses[:ask_on_error] = :question
      q.responses[:not_valid] = "Please enter a valid email address"
    }

    password = stripped(options[:password])
    if password.nil?

      password = ask("Password: ") { |q|
        q.echo = '*'
        q.whitespace = :chomp
        q.validate = /\A.{6,}\Z/
        q.responses[:not_valid] = "Password must be 6 or more characters"
        q.responses[:ask_on_error] = :question
      }

      ask("Confirm password: ") { |q|
        q.echo = '*'
        q.whitespace = :chomp
        q.validate = lambda { |val| val == password }
        q.responses[:not_valid] = "Passwords do not match"
        q.responses[:ask_on_error] = :question
      }

    else
      raise "password must be at least 6 characters" unless password.length >= 6
    end
    
    name = maybe_prompt(options[:name], "Name (optional): ") { |q|
      q.whitespace = :strip_and_collapse
    }

    location = maybe_prompt(options[:location], "Location (optional): ") { |q|
      q.whitespace = :strip_and_collapse
    }

    puts
    puts "Please review our terms and conditions:"
    puts "http://..."
    puts

    terms_accepted = ask("Do you accept the terms and conditions [y/n]: ") { |q|
      q.validate = /\A(y(?:es)?|no?)\Z/i
      q.responses[:ask_on_error] = :question
      q.responses[:not_valid] = 'Please answer yes or no'
    }

    raise "terms and conditions rejected" unless terms_accepted.match(/^y/i)

    client = PlaygroundClient::API.new
    client.user_register(
      :username   => username,
      :email      => email,
      :password   => password,
      :name       => name,
      :location   => location
    )
  end
end

#
# Login User

desc 'Describe login here'
arg_name 'Describe arguments to login here'
command :login do |c|
  c.action do |global_options,options,args|
    puts "login command ran"
  end
end

#
# Logout User

desc 'Describe logout here'
arg_name 'Describe arguments to logout here'
command :logout do |c|
  c.action do |global_options,options,args|
    puts "logout command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
